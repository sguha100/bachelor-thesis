\subsection{zone\_stubs.c}
This file provides stubs for the UPPAAL DBM libraries.

<<zone_stubs.c>>=
/* This stuff is courtesy the UPPAAL DBM library. */
#include <dbm/constraints.h>
#include <dbm/dbm.h>
#include <dbm/fed.h>
#include <dbm/print.h>
#include <base/bitstring.h>

#include <stdio.h>

#ifdef __cplusplus
using namespace dbm;

@ 
\begin{itemize}
\item This is the struct which we export to Ocaml for representing a
  DBM.
<<zone_stubs.c>>=
typedef struct dbm_struct_t {
  cindex_t dim;
  raw_t *dbm;
} dbm_struct_t;

@ 
\item Deprecated.
<<zone_stubs.c>>=
std::string getClockName(cindex_t index) 
{
  char str1[4];
  sprintf(str1, "x%d", index);
  return std::string(str1);
}

@ 
\item Used mainly for debugging.
<<zone_stubs.c>>=
const char *dbm_toString(raw_t *dbm, cindex_t dim) 
{
  if (dbm_isEmpty(dbm, dim))
    {
      return "false";
    }

  uint32_t mingraph[bits2intsize(dim*dim)];
  size_t n = dbm_cleanBitMatrix(dbm, dim, mingraph,
                                dbm_analyzeForMinDBM(dbm, dim, mingraph));
  if (n == 0)
    {
      return "true";
    }

  char buffer[32];
  std::string str;
  bool firstConstraint = true;

  str += "(";
  for(cindex_t i = 0; i < dim; ++i)
    {
      for(cindex_t j = 0; j < dim; ++j)
        {
          if (base_readOneBit(mingraph, i*dim+j))
            {
              assert(i != j); // Not part of mingraph.

              // Conjunction of constraints.
              if (!firstConstraint)
                {
                  str += " && ";
                }
              firstConstraint = false;

              // Write constraints xi-xj <|<= DBM[i,j]
              if (i == 0)
                {
                  assert(j != 0); // 0,0 never part of mingraph
                  if (dbm_addFiniteRaw(dbm[j], dbm[j*dim]) == dbm_LE_ZERO)
                    {
                      assert(n);
                      n -= base_getOneBit(mingraph, j*dim);
                      base_resetOneBit(mingraph, j*dim);

                      // xj == b
                      snprintf(buffer, sizeof(buffer), "==%d",
                               -dbm_raw2bound(dbm[j]));
                      str += getClockName(j);
                      str += buffer;
                    }
                  else // b < xj, b <= xj
                    {
                      snprintf(buffer, sizeof(buffer), "%d%s",
                               -dbm_raw2bound(dbm[j]),
                               dbm_rawIsStrict(dbm[j]) ? "<" : "<=");
                      str += buffer;
                      str += getClockName(j);
                    }
                }
              else
                {
                  // xi-xj == b ?
                  if (dbm_addFiniteRaw(dbm[i*dim+j], dbm[j*dim+i]) == dbm_LE_ZERO)
                    {
                      assert(n);
                      n -= base_getOneBit(mingraph, j*dim+i);
                      base_resetOneBit(mingraph, j*dim+i);

                      // xi == xj
                      if (j > 0 && dbm[i*dim+j] == dbm_LE_ZERO)
                        {
                          str += getClockName(i);
                          str += "==";
                          str += getClockName(j);
                          goto consume_n;
                        }
                      // == b
                      snprintf(buffer, sizeof(buffer), "==%d",
                               dbm_raw2bound(dbm[i*dim+j]));
                    }
                  else
                    {
                      // xi < xj, xi <= xj
                      if (j > 0 && dbm_raw2bound(dbm[i*dim+j]) == 0)
                        {
                          str += getClockName(i);
                          str += dbm_rawIsStrict(dbm[i*dim+j]) ? "<" : "<=";
                          str += getClockName(j);
                          goto consume_n;
                        }
                      // < b, <= b
                      snprintf(buffer, sizeof(buffer), "%s%d",
                               dbm_rawIsStrict(dbm[i*dim+j]) ? "<" : "<=",
                               dbm_raw2bound(dbm[i*dim+j]));
                    }

                  if (j == 0) // xi < b, xi <= b
                    {
                      assert(i != 0); // 0,0 never part of mingraph
                      str += getClockName(i);
                      str += buffer;
                    }
                  else // xi-xj < b, xi-xj <= b
                    {
                      str += getClockName(i);
                      str += "-";
                      str += getClockName(j);
                      str += buffer;
                    }
                }
            consume_n:
              assert(n);
              --n; // Consumed one constraint.
              if (!n) goto stop_loops;
            }
        }
    }
 stop_loops:
  str += ")";

  return str.c_str();
}

extern "C" {
#endif

#include <caml/mlvalues.h>
#include <caml/memory.h>
#include <caml/alloc.h>
#include <caml/custom.h>

@ 
\item Accessing the DBM\_STRUCT\_T part of a Caml custom block.
<<zone_stubs.c>>=
  /* Accessing the DBM_STRUCT_T part of a Caml custom block. */
#define dbm_struct_t_val(v) (*((dbm_struct_t *) Data_custom_val(v)))

@ 
\item Freeing the RAW\_T * part of the DBM\_STRUCT\_T part of a Caml custom block
      while garbage collecting.
<<zone_stubs.c>>=
  /* Freeing the RAW\_T * part of the DBM\_STRUCT\_T part of a Caml custom block
      while garbage collecting. */
  void dbm_struct_t_finalize (value v) {
    free(dbm_struct_t_val(v).dbm);
  }

@ 
\item Hash value, used for Hashtbl.hash in ocaml.
<<zone_stubs.c>>=
  long dbm_struct_t_hash(value v) {
    return ((long) dbm_hash(dbm_struct_t_val(v).dbm, dbm_struct_t_val(v).dim));
  }

@ 
\item Comparison, used for implementing the comparison operators in Ocaml.
<<zone_stubs.c>>=
  int dbm_struct_t_compare (value v1, value v2) {
    raw_t *dbm1 = dbm_struct_t_val(v1).dbm;
    cindex_t dim1 = dbm_struct_t_val(v1).dim;
    raw_t *dbm2 = dbm_struct_t_val(v2).dbm;
    cindex_t dim2 = dbm_struct_t_val(v2).dim;
    if (dim1 != dim2) {
      if (dim1 > dim2) {
        return 1;
      } else {
        return -1;
      }
    } else {
      if (dbm_hash(dbm1, dim1) == dbm_hash(dbm2, dim2)) {
        return 0;
      } else {
        if (dbm_hash(dbm1, dim1) > dbm_hash(dbm2, dim2)) {
          return 1;
        } else {
          return -1;
        }
      }
    }
  }

@ 
\item Encapsulation of opaque handles (of type DBM\_STRUCT\_T)
     as Caml custom blocks.
<<zone_stubs.c>>=
  /* Encapsulation of opaque handles (of type DBM_STRUCT_T)
     as Caml custom blocks. */
  static struct custom_operations dbm_struct_t_ops = {
    "fr.inria.caml.udbm_dbm_struct_t",
    dbm_struct_t_finalize,
    dbm_struct_t_compare,
    dbm_struct_t_hash,
    custom_serialize_default,
    custom_deserialize_default
  };

@ 
\item Allocating a Caml custom block to hold the given DBM\_STRUCT\_T.
<<zone_stubs.c>>=
  /* Allocating a Caml custom block to hold the given DBM_STRUCT_T. */
  static value alloc_dbm_struct_t(dbm_struct_t  w)
  {
    value v = alloc_custom(&dbm_struct_t_ops, sizeof(dbm_struct_t), 0, 1);
    dbm_struct_t_val(v) = w;
    return v;
  }

@ 
\item Wrapper over dbm\_init.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_init (value dim) {
    CAMLparam1(dim);
    dbm_struct_t s;
    s.dim = Int_val(dim);
    s.dbm = (raw_t *)malloc(Int_val(dim)*Int_val(dim)*sizeof(raw_t));
    dbm_init(s.dbm, s.dim);
    CAMLreturn (alloc_dbm_struct_t(s));
  }

@ 
\item This function constrains a DBM using an \texttt{(i, j,
strictness, bound)} constraint.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_constrain_using_tuple (value dbm, value c_tuple)
  {
    CAMLparam2(dbm, c_tuple);
    dbm_struct_t s, s_dup;
    s = dbm_struct_t_val(dbm);
    s_dup.dim = s.dim;
    s_dup.dbm = (raw_t *) malloc(s_dup.dim*s_dup.dim*sizeof(raw_t));
    dbm_copy(s_dup.dbm, s.dbm, s_dup.dim);
    BOOL isStrict;
    switch (Field(c_tuple, 2)) {
    case Val_int(1): //ocaml true
      isStrict = TRUE;
      break;
    case Val_int(0): //ocaml false
      isStrict = FALSE;
      break;
    default:
      isStrict = TRUE;
      break;
    }
    dbm_constrain1(s_dup.dbm,
                   s_dup.dim,
                   Int_val(Field(c_tuple, 0)),
                   Int_val(Field(c_tuple, 1)),
                   dbm_boundbool2raw(Int_val(Field(c_tuple, 3)), isStrict));
    CAMLreturn (alloc_dbm_struct_t(s_dup));
  }

@ 
\item Wrapper over dbm\_isEmpty.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_isEmpty (value dbm) {
    CAMLparam1(dbm);
    dbm_struct_t s = dbm_struct_t_val(dbm);
    if (dbm_isEmpty(s.dbm, s.dim) == TRUE) {
      CAMLreturn (Val_int(1)); //ocaml true
    } else {
      CAMLreturn (Val_int(0)); //ocaml false
    }
  }

@ 
\item Exact version of dbm\_haveIntersection.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_haveIntersection (value dst, value src) {
    CAMLparam2(dst, src);
    dbm_struct_t dst_dup;
    dst_dup.dim = dbm_struct_t_val(dst).dim;
    dst_dup.dbm = (raw_t *) malloc(dst_dup.dim*dst_dup.dim*sizeof(raw_t));
    dbm_copy(dst_dup.dbm, dbm_struct_t_val(dst).dbm, dst_dup.dim);
    if (dbm_intersection
        (dst_dup.dbm, dbm_struct_t_val(src).dbm, dst_dup.dim)
        == TRUE) {
      free(dst_dup.dbm);
      CAMLreturn (Val_int(1)); //ocaml true
    } else {
      free(dst_dup.dbm);
      CAMLreturn (Val_int(0)); //ocaml false
    }
  }

@ 
\item Non-in-place wrapper over dbm\_intersection.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_intersection (value dst, value src) {
    CAMLparam2(dst, src);
    dbm_struct_t dst_dup;
    dst_dup.dim = dbm_struct_t_val(dst).dim;
    dst_dup.dbm = (raw_t *) malloc(dst_dup.dim*dst_dup.dim*sizeof(raw_t));
    dbm_copy(dst_dup.dbm, dbm_struct_t_val(dst).dbm, dst_dup.dim);
    dbm_intersection(dst_dup.dbm, dbm_struct_t_val(src).dbm, dst_dup.dim);
    CAMLreturn (alloc_dbm_struct_t(dst_dup));
  }

@ 
\item Non-in-place wrapper over dbm\_freeClock.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_freeClock (value dbm, value k) {
    CAMLparam2(dbm, k);
    dbm_struct_t s_dup;
    s_dup.dim = dbm_struct_t_val(dbm).dim;
    s_dup.dbm = (raw_t *) malloc(s_dup.dim*s_dup.dim*sizeof(raw_t));
    dbm_copy(s_dup.dbm, dbm_struct_t_val(dbm).dbm, s_dup.dim);
    dbm_freeClock(s_dup.dbm, s_dup.dim, Int_val(k));
    CAMLreturn (alloc_dbm_struct_t(s_dup));
  }

@ 
\item Non-in-place wrapper over dbm\_updateValue.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_updateValue (value dbm, value k, value val) {
    CAMLparam3(dbm, k, val);
    dbm_struct_t s_dup;
    s_dup.dim = dbm_struct_t_val(dbm).dim;
    s_dup.dbm = (raw_t *) malloc(s_dup.dim*s_dup.dim*sizeof(raw_t));
    dbm_copy(s_dup.dbm, dbm_struct_t_val(dbm).dbm, s_dup.dim);
    dbm_updateValue(s_dup.dbm, s_dup.dim, Int_val(k), Int_val(val));
    CAMLreturn (alloc_dbm_struct_t(s_dup));
  }

@ 
\item Non-in-place wrapper over dbm\_up.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_up(value dbm) {
    CAMLparam1(dbm);
    dbm_struct_t s_dup;
    s_dup.dim = dbm_struct_t_val(dbm).dim;
    s_dup.dbm = (raw_t *) malloc(s_dup.dim*s_dup.dim*sizeof(raw_t));
    dbm_copy(s_dup.dbm, dbm_struct_t_val(dbm).dbm, s_dup.dim);
    dbm_up(s_dup.dbm, s_dup.dim);
    CAMLreturn (alloc_dbm_struct_t(s_dup));
  }

@ 
\item Used only for debugging.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_toString(value dbm) {
    CAMLparam1(dbm);
    CAMLreturn
      (caml_copy_string
       (dbm_toString
        (dbm_struct_t_val(dbm).dbm, dbm_struct_t_val(dbm).dim)));
  }

@ 
\item Non-in-place wrapper over dbm\_zero.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_zero(value dbm) {
    CAMLparam1(dbm);
    dbm_struct_t s_dup;
    s_dup.dim = dbm_struct_t_val(dbm).dim;
    s_dup.dbm = (raw_t *) malloc(s_dup.dim*s_dup.dim*sizeof(raw_t));
    dbm_copy(s_dup.dbm, dbm_struct_t_val(dbm).dbm, s_dup.dim);
    dbm_zero(s_dup.dbm, s_dup.dim);
    CAMLreturn (alloc_dbm_struct_t(s_dup));
  }

@ 
\item Checks whether the zero valuation is included.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_isZeroIncluded(value dbm) {
    CAMLparam1(dbm);
    dbm_struct_t s = dbm_struct_t_val(dbm);
    int32_t *pt = (int32_t *)malloc(s.dim*sizeof(int32_t));
    int ii;
    for (ii = 0; ii++; ii < s.dim) {
      pt[ii] = 0;
    }
    BOOL temp1 = dbm_isPointIncluded(pt, s.dbm, s.dim);
    free(pt);
    switch (temp1) {
    case TRUE:
      CAMLreturn(Val_int(1));
      break;
    case FALSE:
      CAMLreturn(Val_int(0));
      break;
    default:
      CAMLreturn(Val_int(0));
      break;
    }
  }

@ 
\item Turns a DBM into an equivalent minimal \texttt{(i, j,
strictness, bound)} constraint list.
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_toConstraintList(value dbm_value) 
  {
    CAMLparam1(dbm_value);
    raw_t *dbm = dbm_struct_t_val(dbm_value).dbm;
    cindex_t dim = dbm_struct_t_val(dbm_value).dim;
    assert (!dbm_isEmpty(dbm, dim));
      
    uint32_t mingraph[bits2intsize(dim*dim)];
    size_t n = dbm_cleanBitMatrix(dbm, dim, mingraph,
                                  dbm_analyzeForMinDBM(dbm, dim, mingraph));
    if (n == 0)
      {
        //This is the "true" constraint, so we just let it be an empty list.
        CAMLreturn(Val_int(0)); 
      }

    /* This allocates an empty OCAML list. */
    CAMLlocal1 (current);
    current = Val_int(0); 

    /* str += "("; */
    for(cindex_t i = 0; i < dim; ++i)
      {
        for(cindex_t j = 0; j < dim; ++j)
          {
            if (base_readOneBit(mingraph, i*dim+j))
              {
                CAMLlocal1(hd);
                hd = caml_alloc_tuple(4);
                Store_field(hd, 0, Val_int(i));
                Store_field(hd, 1, Val_int(j));
                switch (dbm_rawIsStrict(dbm[i*dim+j])) {
                case TRUE: Store_field(hd, 2, Val_int(1));break;
                case FALSE: Store_field(hd, 2, Val_int(0));break;
                default: break;
                }
                Store_field(hd, 3, Val_int(dbm_raw2bound(dbm[i*dim + j])));
                CAMLlocal1(temp);
                temp = caml_alloc(2, 0);
                Store_field(temp, 0, hd);
                Store_field(temp, 1, current);
                current = temp;
              }
          }
      }
  stop_loops:
    CAMLreturn(current);
  }

@ 
\item Turns a DBM into an equivalent \texttt{(i, j,
strictness, bound)} constraint list (not minimal, used for abstraction.).
<<zone_stubs.c>>=
  CAMLprim value zone_dbm_toLargerConstraintList(value dbm_value) 
  {
    CAMLparam1(dbm_value);
    raw_t *dbm = dbm_struct_t_val(dbm_value).dbm;
    cindex_t dim = dbm_struct_t_val(dbm_value).dim;
    assert (!dbm_isEmpty(dbm, dim));
      
    uint32_t mingraph[bits2intsize(dim*dim)];
    size_t n = dbm_cleanBitMatrix(dbm, dim, mingraph,
                                  dbm_analyzeForMinDBM(dbm, dim, mingraph));
    if (n == 0)
      {
        //This is the "true" constraint, so we just let it be an empty list.
        CAMLreturn(Val_int(0)); 
      }

    /* This allocates an empty OCAML list. */
    CAMLlocal1 (current);
    current = Val_int(0); 

    /* str += "("; */
    for(cindex_t i = 0; i < dim; ++i)
      {
        for(cindex_t j = 0; j < dim; ++j)
          {
            if (!(dbm[i*dim+j] == dbm_LS_INFINITY) && i != j)
              {
                CAMLlocal1(hd);
                hd = caml_alloc_tuple(4);
                Store_field(hd, 0, Val_int(i));
                Store_field(hd, 1, Val_int(j));
                switch (dbm_rawIsStrict(dbm[i*dim+j])) {
                case TRUE: Store_field(hd, 2, Val_int(1));break;
                case FALSE: Store_field(hd, 2, Val_int(0));break;
                default: break;
                }
                Store_field(hd, 3, Val_int(dbm_raw2bound(dbm[i*dim + j])));
                CAMLlocal1(temp);
                temp = caml_alloc(2, 0);
                Store_field(temp, 0, hd);
                Store_field(temp, 1, current);
                current = temp;
              }
          }
      }
  stop_loops:
    CAMLreturn(current);
  }

#ifdef __cplusplus
}
#endif
@ 
\end{itemize}
