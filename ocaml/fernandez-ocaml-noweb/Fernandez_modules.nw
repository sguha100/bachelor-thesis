\subsection{Fernandez' algorithm in Ocaml}

This section documents the current implementation of Fernandez'
algorithm in Ocaml.

\subsubsection{Signature LTS_TYPE}
This signature defines the interface we expect any LTS data type to provide.
<<Fernandez_modules.ml>>=
module type LTS_TYPE =
sig
@ 
Data types
\begin{itemize}
\item Data type for an LTS node, may or may not implement adjacency list internally.
<<Fernandez_modules.ml>>=
  type node_ref_t
@ 
\item Data type for an LTS action.
<<Fernandez_modules.ml>>=
  type action_t
@ 
\item Data type for an LTS.
<<Fernandez_modules.ml>>=
  type lts_t
@ 
\end{itemize}
Methods
\begin{itemize}
\item This is an equality type for node_ref_t.
<<Fernandez_modules.ml>>=
  val node_equality: lts_t -> node_ref_t -> node_ref_t -> bool
@ 
\item This is the node label used while drawing the LTS in graphviz.
<<Fernandez_modules.ml>>=
  val node_name: lts_t -> node_ref_t -> string
@ 
\item This is in the edge label used while drawing the LTS in graphviz.
<<Fernandez_modules.ml>>=
  val expand_action: lts_t -> action_t -> string
@ 
\item This lists the nodes of an LTS.
<<Fernandez_modules.ml>>=
  val nodes: lts_t -> node_ref_t list
@ 
\item This lists the nodes of an LTS.
<<Fernandez_modules.ml>>=
  val actions: lts_t -> action_t list
@ 
\item This provides the in_adjacency for a particular node in an LTS.
<<Fernandez_modules.ml>>=
  val in_adjacency: lts_t -> node_ref_t -> action_t -> (node_ref_t list)
end

@ 
\end{itemize}
\subsubsection{Functor LTS}
This functor provides the essential algorithms for an LTS while
abstracting out the exact implementation.
<<Fernandez_modules.ml>>=
module LTS =
  functor (LT: LTS_TYPE) ->
struct
@ 
Data types
\begin{itemize}
\item The following datatypes come from the underlying LTS
  implementation.
<<Fernandez_modules.ml>>=
  type node_ref_t = LT.node_ref_t
  type action_t = LT.action_t
  (* type lts = {nodes: node_ref_t array; actions: action_t
     array} *)
  let node_equality = LT.node_equality
  let node_name = LT.node_name
  let expand_action = LT.expand_action
  let nodes = LT.nodes
  let actions = LT.actions
  let in_adjacency = LT.in_adjacency
@ 
\item This is a block, stores a list of nodes as well as Fernandez'
  $info$ structure.
<<Fernandez_modules.ml>>=
  type block =
    {node_refs: node_ref_t list;
     info: (action_t -> (node_ref_t -> int))}
@ 
\item This is a partition, its' constituent blocks are mutually
  exclusive and exhaustive on the nodes of the LTS.
<<Fernandez_modules.ml>>=
  type partition = block list
@ 
\item This is a splitter, it can be simple or compound, thus each
  splitter is a binary tree.
<<Fernandez_modules.ml>>=
  type splitter = Simple of block | Compound of (block * splitter *
                                                   splitter)

@ 
\end{itemize}
Methods
\begin{itemize}
\item This function updates the splitter $t$, replacing any occurence of the
  simple splitter $x$ with the compound splitter $(x, x1, x2)$.
<<Fernandez_modules.ml>>=
  let rec two_way_update_tree l t x x1 x2 =
    match t with
      Simple t0 ->
        if
          (
            (List.for_all
               (function t0elem ->
                 (List.exists (node_equality l t0elem) x.node_refs)
               )
               t0.node_refs
            )
            &&
              (List.for_all
                 (function xelem ->
                   (List.exists (node_equality l xelem) t0.node_refs)
                 )
                 x.node_refs
              )
          ) (*this means t0 and x contain the same elements.*)
        then
          (Compound (x, Simple x1, Simple x2), true)
        else
          (t, false)
    | Compound (t0, t1, t2) -> (
      match
        (two_way_update_tree l t1 x x1 x2)
      with
        (_, false) -> (
          match
            (two_way_update_tree l t2 x x1 x2)
          with
            (_, false) -> (t, false)
          | (tt2, true) -> (Compound (t0, t1, tt2), true)
         )
      | (tt1, true) -> (Compound (t0, tt1, t2), true)
    )

@ 
\item This function updates the queue $w$, replacing any occurrence of
  the simple splitter $x$ with the compound splitter $(x, x1, x2)$.
<<Fernandez_modules.ml>>=
  let rec two_way_update_queue l w x x1 x2 =
    match w with
      [] -> [Compound (x, Simple x1, Simple x2)]
    | t::ts -> (match (two_way_update_tree l t x x1 x2) with
      (_, false) -> t::(two_way_update_queue l ts x x1 x2)
      | (tt, true) -> tt::ts
    )

@ 
\item This function generates the $info$ structure for the nodes $node_refs$
  in the LTS $l$.
<<Fernandez_modules.ml>>=
  let get_info l node_refs =
    function a ->
      function node_ref ->
        List.length
          (List.filter
             (function belem ->
               (List.exists (node_equality l node_ref) (in_adjacency l belem a))
             )
             node_refs
          )

@ 
\item This function generates a block for the nodes $node_refs$ in the
  LTS $l$.
<<Fernandez_modules.ml>>=
  let get_block_from_node_refs l node_refs =
    {node_refs = node_refs;
     info =
        (get_info l node_refs)
    }

@ 
\item This function splits the block $x$ of the LTS $l$ using the
  simple splitter $b$ and the action $a$.
<<Fernandez_modules.ml>>=
  let simple_split_block_on_action l x b a =
    match
      List.partition
        (function xelem ->
          List.exists
            (function belem ->
              (List.exists (node_equality l xelem) (in_adjacency l belem a))
            )
            b.node_refs)
        x.node_refs
    with
      (x1indices, x2indices) -> (get_block_from_node_refs l x1indices, get_block_from_node_refs l x2indices)

@ 
\item This function splits the block $x$ of the LTS $l$ using the
  compound splitter $(b, b1, b2)$ and the action $a$.
<<Fernandez_modules.ml>>=
  let compound_split_block_on_action l x b b1 b2 a =
    let 
        (b1, b2) =
      if
        ((List.length b2.node_refs) < (List.length b1.node_refs))
      then
        (b2, b1)
      else
        (b1, b2)
    in
    match
      (List.partition
         (function xelem -> (b1.info a xelem) > 0)
         x.node_refs)
    with
      (y1, y2) ->
        (match
            (List.partition
               (function xelem ->
                 (b1.info a xelem) < (b.info a xelem)
               )
               y1
               ,
             List.partition
               (function xelem ->
                 (b.info a xelem) > 0
               )
               y2)
         with
           ((x3noderefs, x1noderefs), (x2noderefs, x4noderefs)) ->
             ((get_block_from_node_refs l x3noderefs,
               get_block_from_node_refs l x1noderefs),
              (get_block_from_node_refs l x2noderefs,
               get_block_from_node_refs l x4noderefs))
        )
          
@ 
\item This function splits the blocks in $xl$ of the LTS $l$ using the
  simple splitter $b$ and the action $a$ and updates the queue $w$
  accordingly.
<<Fernandez_modules.ml>>=
  let rec simple_split_blocks_on_action l (w, xl) b a =
    match xl with
      [] -> (w, [])
    | x::xs ->
      (let
          (ww, xxs) = (simple_split_blocks_on_action l (w, xs) b a)
       in
       (match (simple_split_block_on_action l x b a) with
         ({node_refs= []; info= _}, x2) -> (ww, x2::xxs)
       | (x1, {node_refs=[]; info= _}) -> (ww, x1::xxs)
       | (x1, x2) -> (let www = (two_way_update_queue l ww x x1 x2) in (www, x1::x2::xxs))
       ))

@ 
\item This function splits the blocks in $xl$ of the LTS $l$ using the
  compound splitter $(b, b1, b2)$ and the action $a$ and updates the queue $w$
  accordingly.
<<Fernandez_modules.ml>>=
  let rec compound_split_blocks_on_action l (w, xl) b b1 b2 a =
    match xl with
      [] -> (w, [])
    | x::xs ->
      (let
          (ww, xxs) =
         (compound_split_blocks_on_action l (w, xs) b b1 b2 a)
       in
       (match
           (compound_split_block_on_action l x b b1 b2 a)
        with
          (({node_refs=[]; info=_}, {node_refs=[]; info=_}), ({node_refs=[];
                                                               info=_}, x4)) ->
            (ww, x4::xxs)
        | (({node_refs=[]; info=_}, x1), ({node_refs=[]; info=_}, {node_refs=[];
                                                                   info=_})) ->
          (ww, x1::xxs)
        | (({node_refs=[]; info=_}, {node_refs=[]; info=_}), (x2, {node_refs=[];
                                                                   info=_})) ->
          (ww, x2::xxs)
        | ((x3, {node_refs=[]; info=_}), ({node_refs=[]; info=_}, {node_refs=[];
                                                                   info=_})) ->
          (ww, x3::xxs)
        | ((x3, x1), ({node_refs=[]; info=_}, {node_refs=[]; info=_})) ->
          (let
              www = (two_way_update_queue l ww x x3 x1)
           in
           (www, x3::x1::xxs))
        | ((x3, {node_refs=[]; info=_}), (x2, {node_refs=[]; info=_})) ->
          (let
              www = (two_way_update_queue l ww x x3 x2)
           in
           (www, x3::x2::xxs))
        | (({node_refs=[]; info=_}, x1), (x2, {node_refs=[]; info=_})) ->
          (let
              www = (two_way_update_queue l ww x x1 x2)
           in
           (www, x1::x2::xxs))
        | ((x3, x1), (x2, {node_refs=[]; info=_})) ->
          (let www =
             (let x23 =
                {node_refs = x2.node_refs@x3.node_refs;
                 info =
                    (function a -> function node_ref ->
                      x2.info a node_ref + x3.info a node_ref
                    )}
              in
              (two_way_update_queue l
                 (two_way_update_queue l ww x x1 x23) x23 x2 x3))
           in
           (www, x1::x2::x3::xxs))
       ))

@ 
\item This function splits the partition $pi$ of the LTS $l$ using the
  splitter $sp$ and the action $a$ and updates the queue $w$
  accordingly.
<<Fernandez_modules.ml>>=
  let split_partition_on_action l (w, pi) sp a =
    match
      sp
    with
      Simple b -> simple_split_blocks_on_action l (w, pi) b a
    | Compound (b, Simple b1, Simple b2) -> compound_split_blocks_on_action l (w, pi) b b1 b2 a
    | Compound (b, Compound (b1, _, _), Simple b2) -> compound_split_blocks_on_action l (w, pi) b b1 b2 a
    | Compound (b, Simple b1, Compound (b2, _, _)) -> compound_split_blocks_on_action l (w, pi) b b1 b2 a
    | Compound (b, Compound (b1, _, _), Compound (b2, _, _)) ->
      compound_split_blocks_on_action l (w, pi) b b1 b2 a

@ 
\item This function splits the partition $pi$ of the LTS $l$ using the
  splitter $sp$ and the actions $action_list$ and updates the queue $w$
  accordingly.
<<Fernandez_modules.ml>>=
  let rec split_partition_on_actions l (w, pi) b action_list =
    List.fold_left
      (function (w, pi) ->
        split_partition_on_action l (w, pi) b
      )
      (w, pi)
      action_list

@ 
\item This function dequeues an splitter from the queue $w$ and splits
  $pi$ on it.
<<Fernandez_modules.ml>>=
  let dequeue l (w, pi) =
    match
      w
    with
      [] -> ([], pi)
    | (Simple b)::wtail ->
      split_partition_on_actions l (wtail, pi) (Simple b)
        (actions l)
    | (Compound (b, b1, b2))::wtail ->
      split_partition_on_actions
        l
        (wtail@[b1; b2], pi)
        (Compound (b, b1, b2))
        (actions l)

@ 
\item This function dequeues each splitter from the queue $w$ in turn, splitting
  $pi$ on it.
<<Fernandez_modules.ml>>=
  let rec emptyqueue l (w, pi) =
    match
      w
    with
      [] -> ([], pi)
    | whead::wtail -> emptyqueue l (dequeue l (w, pi))

@ 
\item This function splits the LTS $l$ starting with partition $pi$
  using Fernandez' algorithm.
<<Fernandez_modules.ml>>=
  let fernandez_specifying_partition l node_ref_list_list =
    let
        pi =
      List.map
        (get_block_from_node_refs l)
        node_ref_list_list
    in
    let
        (_, pi) = emptyqueue l ((List.map (function block -> Simple block) pi), pi)
    in
    pi

@ 
\item This function splits the LTS $l$ using Fernandez' algorithm.
<<Fernandez_modules.ml>>=
  let fernandez l =
    let
        llistblock = (get_block_from_node_refs l (nodes l))
    in
    let
        (_, pi) = emptyqueue l ([Simple llistblock], [llistblock])
    in
    pi

@ 
\item This function prints a DOT representation of a given LTS.
<<Fernandez_modules.ml>>=
  let print_dot l filename = 
    let
        out = open_out filename
    in
    Printf.fprintf out "digraph {\n";
    List.iter
      (function node_ref1 ->
        Printf.fprintf out "\"%s\";\n" (node_name l node_ref1);
        List.iter
          (function a ->
            List.iter
              (function node_ref2 ->
                Printf.fprintf
                  out
                  "\"%s\" -> \"%s\" [label = \"%s\"];\n"
                  (node_name l node_ref2)
                  (node_name l node_ref1)
                  (expand_action l a)

              )
              (in_adjacency l node_ref1 a)
          )
          (actions l)
      )
      (nodes l);
    Printf.fprintf out "}\n";
    flush out;
    close_out out

@ 
\item This function prints a DOT representation of the equivalence
  classes given by a partition of the LTS.
<<Fernandez_modules.ml>>=
  let print_quotient_dot l partition filename =
    let
        out = open_out filename  
    in
    Printf.fprintf out "digraph \"Bisimilarity quotient graph\" {\n";
    List.fold_left
      (function count -> function block ->
        Printf.fprintf out
          "subgraph cluster_%s { \nrank = same; \n"
          (string_of_int count);
        List.iter
          (function node_ref ->
            Printf.fprintf
              out
              ("\"%s\";\n")
              (node_name l node_ref);
          )
          block.node_refs;
        Printf.fprintf out "}\n";
        (count + 1)
      )
      0
      partition;
    List.iter
      (function block ->
        List.iter
          (function node_ref ->
  (* Printf.fprintf out "\"%s\";\n" (node_name l node_ref); *)
            List.iter
              (function a ->
                List.iter
                  (function successor_node_ref ->
                    Printf.fprintf
                      out
                      "\"%s\" -> \"%s\" [label = \"%s\"];\n"
                      (node_name l successor_node_ref)
                      (node_name l node_ref)
                      (expand_action l a)
                  )
                  (in_adjacency l node_ref a)
              )
              (actions l)
            ;
          )
          block.node_refs;
      )
      partition;
    Printf.fprintf out "}\n";
    flush out;
    close_out out

@
\item This is a somewhat bizarre structure, using the same
  signature. Let's see if it works.
<<Fernandez_modules.ml>>=
  module Quotient_LTS = struct
    type node_ref_t = int
    type action_t = LT.action_t
    type node = {
      node_ref_list: LT.node_ref_t list;
      in_adjacencies: (action_t *(node_ref_t list)) list
    }
    type lts_t = {nodes: node array; original: LT.lts_t}
    let node_equality l node_ref1 node_ref2 =
      (List.length l.nodes.(node_ref1).node_ref_list
       =
          List.length l.nodes.(node_ref2).node_ref_list
      )
      &&
        (List.for_all
           (function n1 ->
             List.length
               (List.filter
                  (LT.node_equality l.original n1)
                  l.nodes.(node_ref2).node_ref_list
               )
               =
               List.length
                 (List.filter
                    (LT.node_equality l.original n1)
                    l.nodes.(node_ref1).node_ref_list
                 )
           )
           l.nodes.(node_ref1).node_ref_list
        )
    let node_name l node_ref =
      "[" ^
        (String.concat
           "; "
           (List.map
              (LT.node_name l.original)
              (l.nodes.(node_ref).node_ref_list)
           )
        )
      ^ "]"
    let expand_action l a = LT.expand_action l.original a
    let nodes l =
      Array.to_list (Array.init (Array.length l.nodes) (function i ->
    i))
    let actions l = LT.actions l.original
    let in_adjacency l node_ref a =
      try
        List.assoc
          a
          l.nodes.(node_ref).in_adjacencies
      with
        Not_found -> []
  end

  let quotient_lts l pi = {
    Quotient_LTS.original = l;
    Quotient_LTS.nodes =
      let
          node_ref_list_array =
        Array.of_list
          (List.map
             (function block -> block.node_refs)
             pi
          )
      in
      let
          pseudo_quotient =
        {
          Quotient_LTS.original = l;
          Quotient_LTS.nodes =
            Array.map
              (function node_ref_list ->
                {
                  Quotient_LTS.node_ref_list = node_ref_list;
                  Quotient_LTS.in_adjacencies = []
                }
              )
              node_ref_list_array
        }
      in
      Array.map
        (function node_ref_list ->
          {
            Quotient_LTS.node_ref_list =
              node_ref_list;
            Quotient_LTS.in_adjacencies =
              List.map
                (function a ->
                  (a, 
                   List.fold_left
                     (function partial_in_adjacency -> function n1 ->
                       (List.filter
                          (function n2 ->
                            not
                              (try (
                            List.exists
                                 (Quotient_LTS.node_equality
                                    pseudo_quotient
                                    n2
                                 )
                                 partial_in_adjacency                            )
                               with
                               | Invalid_argument s ->
                                 raise
                                   (Invalid_argument
                                      ("We caught this: " ^ s)
                                   )
                              )
                          )
                          (List.map
                             (function n2 ->
                               let index = ref (-1) in
                               Array.iteri
                                 (function i -> function n3 ->
                                   if
                                     List.exists
                                       (LT.node_equality l n2)
                                       n3
                                   then
                                     index := i
                                   else
                                     ()
                                 )
                                 node_ref_list_array;
                               !index
                             )
                             (LT.in_adjacency l n1 a)
                          )
                       )
                       @
                         partial_in_adjacency
                     )
                     []
                     node_ref_list
                  )
                )
                (LT.actions l)
          }
        )
        node_ref_list_array
  }
      
end
@ 
\end{itemize}
<<Fernandez_modules.ml>>=

@ 
\subsubsection Structure SimpleLT
This structure provides a simple LTS, using an array of in adjacency
lists to represent the LTS.
<<Fernandez_modules.ml>>=
module SimpleLT =
struct
  type node_ref_t = int
  type action_t = int
  type lts_t =
    {action_count : action_t;
     in_adjacencies: ((action_t *(node_ref_t list)) list) array}
  let node_equality l node_ref1 node_ref2 = (node_ref1 = node_ref2)
  let node_name l i= (string_of_int i)
  let expand_action l a = string_of_int a
  let nodes=
    function l ->
      Array.to_list (Array.init (Array.length l.in_adjacencies) (function i -> i))
  let actions =
    function l ->
      Array.to_list (Array.init l.action_count (function a-> a))
  let in_adjacency =
    function l ->
      function node_ref ->
        function a ->
          try
            List.assoc
              a
              l.in_adjacencies.(node_ref)
          with
            Not_found -> []
end

@ 
\subsubsection Structure SimpleLTS
This structure uses the functor LTS and the structure SimpleLT.
<<Fernandez_modules.ml>>=
module SimpleLTS = LTS (SimpleLT)
let lts1 = {SimpleLT.in_adjacencies = [|[(2, [6])]; 
                                        [(0, [1])]; 
                                        [(0, [0]); (1, [7])];
                                        [(1, [2])];
                                        [(1, [2])];
                                        [(0, [4; 5]); (2, [6])];
                                        [(1, [3]); (2, [2])];
                                        [(0, [1])]|]; SimpleLT.action_count=3}

@ 
\subsubsection Examples
<<Fernandez_modules.ml>>=
let pi1 = SimpleLTS.fernandez lts1
let lts2 = {SimpleLT.in_adjacencies=[|[(0, [5])]; 
                                      [(0, [0; 1])]; 
                                      [(1, [4])];
                                      [(0, [6]); (1, [2])];
                                      [(1, [3])];
                                      [];
                                      [(1, [5])]
                                    |]; SimpleLT.action_count=2}
let pi2 = SimpleLTS.fernandez lts2
let lts3 = {SimpleLT.in_adjacencies=[|[(0, [5])]; 
                                      [(0, [0; 1])]; 
                                      [(1, [4])];
                                      [(0, [6]); (1, [2])];
                                      [(1, [3])];
                                      [];
                                      [(1, [5])];
                                      []
                                    |]; SimpleLT.action_count=2}
let pi3 = SimpleLTS.fernandez lts3
