\subsection{Relations.ml}
This function provides the abstract implementation of the relation-checking mechanism.

<<Relations.ml>>=
open ZVG_modules
open Grammar_types
open Zone_stubs
open UDBM_utilities

module RelationCheckingFunctor =
  functor (Table: DP_TABLE_TYPE) ->
    functor (Relation: TA_RELATION_TYPE) ->
struct
  type table = Table.table
  let empty_table = Table.empty_table
  let lookup = Table.lookup
  let remove = Table.remove
  let insert = Table.insert
  let nodes_to_other_nodes = Relation.nodes_to_other_nodes
  let rec check_relation_on_nodes
      l1
      l2
      yes_table
      no_table
      z1
      z2
      =
    if
      (Printf.printf
         "Looking up (%s, %s) in yes_table\n"
         (ZVGQuotient2.node_name l1 z1)
         (ZVGQuotient2.node_name l2 z2)
      ;
       lookup
         yes_table
         l1
         l2
         (z1, z2)
      )
    then
      true
    else
      (if
          (Printf.printf
             "Looking up (%s, %s) in no_table\n"
             (ZVGQuotient2.node_name l1 z1)
             (ZVGQuotient2.node_name l2 z2)
          ;
           lookup
             no_table
             l1
             l2
             (z1, z2)
          )
       then
          false
       else
          (Printf.printf
             "Speculatively inserting (%s, %s) in yes_table\n"
             (ZVGQuotient2.node_name l1 z1)
             (ZVGQuotient2.node_name l2 z2)
          ;
           insert yes_table l1 l2 (z1, z2);
           let
               (x1, x2) =
             nodes_to_other_nodes
               l1
               l2
               z1
               z2             
           in
           Printf.printf
             "x1 = [%s]\nx2 = [%s]\n"
             (String.concat
                "; "
                (List.map
                   (function (z3, lz4) ->
                     "(" ^ (ZVGQuotient2.node_name l1 z3) ^ ", [" ^
                       (String.concat
                          "; "
                          (List.map
                             (function z4 ->
                               ZVGQuotient2.node_name l2 z4)
                             lz4
                          )
                       )
                     ^ "])"
                   )
                   x1
                )
             )
             (String.concat
                "; "
                (List.map
                   (function (lz3, z4) ->
                     "([" ^
                       (String.concat
                          "; "
                          (List.map
                             (function z3 ->
                               ZVGQuotient2.node_name l1 z3)
                             lz3
                          )
                       )
                     ^ "], " ^
                       (ZVGQuotient2.node_name l2 z4)
                     ^ ")"
                   )
                   x2
                )
             )
           ;
           match
             (List.for_all
                (function (z3, lz4) ->
                  List.exists
                    (function z4 ->
                      check_relation_on_nodes
                        l1
                        l2
                        yes_table
                        no_table
                        z3
                        z4
                    )
                    lz4
                )
                x1
                ,
              List.for_all
                (function (lz3, z4) ->
                  List.exists
                    (function z3 ->
                      check_relation_on_nodes
                        l1
                        l2
                        yes_table
                        no_table
                        z3
                        z4
                    )
                    lz3
                )
                x2
             )
           with
           | (true, true) ->
             Printf.printf
               "Letting  (%s, %s) stay in yes_table\n"
               (ZVGQuotient2.node_name l1 z1)
               (ZVGQuotient2.node_name l2 z2)
             ;
             true
           | (t1, t2) ->
             Printf.printf
               ("Inserting  (%s, %s) in no_table after removal from yes_table after getting (%s, %s)\n")
               (ZVGQuotient2.node_name l1 z1)
               (ZVGQuotient2.node_name l2 z2)
               (if t1 then "true" else "false")
               (if t2 then "true" else "false")
             ;
             remove yes_table l1 l2 (z1, z2);
             insert no_table l1 l2 (z1, z2);
             false
          )
      )
  let check_relation_on_timed_automata
      ta1
      ta2
      q1
      q2
      =
    let yes_table = empty_table () in
    let no_table = empty_table () in
    let
        z1 =
      try (
        List.find
          (function z1 ->
            List.exists
              (function node_ref1 ->
                (node_ref1.zone_location2 = ta1.numinit)
                &&
                  (dbm_isZeroIncluded node_ref1.zone_constraint2)
              )
              q1.ZVGQuotient2.nodes.(z1).ZVGQuotient2.node_ref_list
          )
          (ZVGQuotient2.nodes q1)
      ) with
      | Not_found ->
        (invalid_arg
           "We caught Not_found while searching for z1.")
    in
    Printf.printf "%s\n" "After selecting z1:";
    List.iter
      (function node_ref1 ->
        Printf.printf
          "node_ref1 = %s %s\n"
          (string_of_int node_ref1.zone_location2)
          (dbm_to_string ta1.clock_names node_ref1.zone_constraint2)
        ;
      )
      q1.ZVGQuotient2.nodes.(z1).ZVGQuotient2.node_ref_list;
    let
        z2 =
      try (
        List.find
          (function z2 ->
            List.exists
              (function node_ref2 ->
                (node_ref2.zone_location2 = ta2.numinit)
                &&
                  (dbm_isZeroIncluded node_ref2.zone_constraint2)
              )
              q2.ZVGQuotient2.nodes.(z2).ZVGQuotient2.node_ref_list
          )
          (ZVGQuotient2.nodes q2)
      ) with
      | Not_found ->
        (invalid_arg
           "We caught Not_found while searching for z2.")
    in
    Printf.printf "%s\n" "After selecting z2:";
    List.iter
      (function node_ref2 ->
        Printf.printf
          "node_ref2 = %s %s\n"
          (string_of_int node_ref2.zone_location2)
          (dbm_to_string ta2.clock_names node_ref2.zone_constraint2)
        ;
      )
      q2.ZVGQuotient2.nodes.(z2).ZVGQuotient2.node_ref_list;
    check_relation_on_nodes
      q1
      q2
      yes_table
      no_table
      z1
      z2
end

module STABChecker = RelationCheckingFunctor (Table_using_list) (STAB)
module TADBChecker = RelationCheckingFunctor (Table_using_list) (TADB)
module TAOBChecker = RelationCheckingFunctor (Table_using_list) (TAOB)
